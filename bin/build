#!/usr/bin/env bash

# Harden script against failure.
set -uo pipefail
trap 's=$?; echo "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $s' ERR

CLONE_URL=git@gitlab.com:JonnyHaystack/arch-repo.git
LOCAL_PATH=$HOME/.local/share/arch-repo
REPO_PATH=x86_64
REPO_NAME=meta

PACKAGES=${@:-pkg/haystack/*}
CHROOT="$PWD/root"

alias gitc='git -C "${LOCAL_PATH}"'

# Create chroot and initialise root filesystem.
mkdir -p "$CHROOT"
[[ -d "$CHROOT/root" ]] || mkarchroot -C /etc/pacman.conf "$CHROOT/root" base base-devel

# Build all packages.
for package in $PACKAGES; do
    cd "$package"
    rm -f *.pkg.tar.xz
    makechrootpkg -cur $CHROOT
    cd -
done

# Clone/pull repo.
if [[ -d "${LOCAL_PATH}" ]]; then
    # LOCAL_PATH exists, reset and pull any changes
    git -C "${LOCAL_PATH}" reset --hard
    git -C "${LOCAL_PATH}" clean -xffd
    git -C "${LOCAL_PATH}" checkout master
    git -C "${LOCAL_PATH}" pull
else
    # LOCAL_PATH does not exist, so clone it
    git clone "${CLONE_URL}" "${LOCAL_PATH}"
fi

mkdir -p "${LOCAL_PATH}/${REPO_PATH}"

# Add built packages to database.
ln -sf $(readlink -f "$REPO_NAME.db.tar.xz") "$LOCAL_PATH/$REPO_PATH/$REPO_NAME.db.tar.xz"
ln -sf $(readlink -f "$REPO_NAME.files.tar.xz") "$LOCAL_PATH/$REPO_PATH/$REPO_NAME.files.tar.xz"
for package in $PACKAGES; do
  repo-add "$LOCAL_PATH/$REPO_PATH/$REPO_NAME.db.tar.xz" "$package/"*.pkg.tar.xz
  cp "$package/"*.pkg.tar.xz "$LOCAL_PATH/$REPO_PATH/"
done
rm -f "$LOCAL_PATH/$REPO_PATH/$REPO_NAME."*.tar
xz -d "$LOCAL_PATH/$REPO_PATH/$REPO_NAME."*.tar.xz
cp --remove-destination "$LOCAL_PATH/$REPO_PATH/$REPO_NAME.db"{.tar,}
cp --remove-destination "$LOCAL_PATH/$REPO_PATH/$REPO_NAME.files"{.tar,}

# Upload back to the repo.
if ! git -C "${LOCAL_PATH}" status | grep "nothing to commit, working tree clean" &>/dev/null; then
    git -C "${LOCAL_PATH}" add .
    git -C "${LOCAL_PATH}" commit -m "aursync $@"
    git -C "${LOCAL_PATH}" push
fi
